#include "Color.h"



namespace Engine
{
#pragma region Color
	
	const Color Color::Black	= 0xFF000000;
	const Color Color::White	= 0xFFFFFFFF;
	const Color Color::Red		= 0xFF0000FF;
	const Color Color::Green	= 0xFF00FF00;
	const Color Color::Blue		= 0xFFFF0000;
	const Color Color::Yellow	= 0xFF00FFFF;
	const Color Color::Cyan		= 0xFFFFFF00;
	const Color Color::Magenta	= 0xFFFF00FF;


	Color::Color()
	{

	}

	Color::Color(UInt32 packedBits)
		: packedBits(packedBits)
	{

	}

	Color::Color(Byte r, Byte g, Byte b, Byte a)
		: r(r), g(g), b(b), a(a)
	{

	}

	Color::Color(const Color& other)
	{
		MemoryCopy( this, &other );
	}

	Color& Color::operator=(const Color& other)
	{
		MemoryCopy( this, &other );

		return *this;
	}

	Byte& Color::operator[](SizeType index)
	{
		return components[index];
	}

	const Byte& Color::operator[](SizeType index) const
	{
		return const_cast<Color*>(this)->operator[](index);
	}

	Bool Color::operator==(Color color) const
	{
		return packedBits == color.packedBits;
	}

	Bool Color::operator!=(Color color) const
	{
		return !operator==(color);
	}

#pragma endregion


#pragma region LinearColor

	constexpr Float32 Divide255LinearLookupTable[256] =
	{
		0, 0.003921569, 0.007843138, 0.011764707, 0.015686275, 0.019607844, 0.023529414, 0.027450982,
		0.03137255, 0.03529412, 0.039215688, 0.043137256, 0.04705883, 0.050980397, 0.054901965, 0.058823533,
		0.0627451, 0.06666667, 0.07058824, 0.07450981, 0.078431375, 0.08235294, 0.08627451, 0.09019608,
		0.09411766, 0.098039225, 0.10196079, 0.10588236, 0.10980393, 0.1137255, 0.11764707, 0.121568635,
		0.1254902, 0.12941177, 0.13333334, 0.13725491, 0.14117648, 0.14509805, 0.14901961, 0.15294118,
		0.15686275, 0.16078432, 0.16470589, 0.16862746, 0.17254902, 0.1764706, 0.18039216, 0.18431373,
		0.18823531, 0.19215688, 0.19607845, 0.20000002, 0.20392159, 0.20784315, 0.21176472, 0.21568629,
		0.21960786, 0.22352943, 0.227451, 0.23137257, 0.23529413, 0.2392157, 0.24313727, 0.24705884,
		0.2509804, 0.25490198, 0.25882354, 0.2627451, 0.26666668, 0.27058825, 0.27450982, 0.2784314,
		0.28235295, 0.28627452, 0.2901961, 0.29411766, 0.29803923, 0.3019608, 0.30588236, 0.30980393,
		0.3137255, 0.31764707, 0.32156864, 0.3254902, 0.32941177, 0.33333334, 0.3372549, 0.34117648,
		0.34509805, 0.34901962, 0.3529412, 0.35686275, 0.36078432, 0.3647059, 0.36862746, 0.37254903,
		0.37647063, 0.3803922, 0.38431376, 0.38823533, 0.3921569, 0.39607847, 0.40000004, 0.4039216,
		0.40784317, 0.41176474, 0.4156863, 0.41960788, 0.42352945, 0.427451, 0.43137258, 0.43529415,
		0.43921572, 0.4431373, 0.44705886, 0.45098042, 0.454902, 0.45882356, 0.46274513, 0.4666667,
		0.47058827, 0.47450984, 0.4784314, 0.48235297, 0.48627454, 0.4901961, 0.49411768, 0.49803925,
		0.5019608, 0.5058824, 0.50980395, 0.5137255, 0.5176471, 0.52156866, 0.5254902, 0.5294118,
		0.53333336, 0.5372549, 0.5411765, 0.54509807, 0.54901963, 0.5529412, 0.5568628, 0.56078434,
		0.5647059, 0.5686275, 0.57254905, 0.5764706, 0.5803922, 0.58431375, 0.5882353, 0.5921569,
		0.59607846, 0.6, 0.6039216, 0.60784316, 0.6117647, 0.6156863, 0.61960787, 0.62352943,
		0.627451, 0.6313726, 0.63529414, 0.6392157, 0.6431373, 0.64705884, 0.6509804, 0.654902,
		0.65882355, 0.6627451, 0.6666667, 0.67058825, 0.6745098, 0.6784314, 0.68235296, 0.6862745,
		0.6901961, 0.69411767, 0.69803923, 0.7019608, 0.7058824, 0.70980394, 0.7137255, 0.7176471,
		0.72156864, 0.7254902, 0.7294118, 0.73333335, 0.7372549, 0.7411765, 0.74509805, 0.7490196,
		0.75294125, 0.7568628, 0.7607844, 0.76470596, 0.7686275, 0.7725491, 0.77647066, 0.7803922,
		0.7843138, 0.78823537, 0.79215693, 0.7960785, 0.8000001, 0.80392164, 0.8078432, 0.8117648,
		0.81568635, 0.8196079, 0.8235295, 0.82745105, 0.8313726, 0.8352942, 0.83921576, 0.8431373,
		0.8470589, 0.85098046, 0.854902, 0.8588236, 0.86274517, 0.86666673, 0.8705883, 0.8745099,
		0.87843144, 0.882353, 0.8862746, 0.89019614, 0.8941177, 0.8980393, 0.90196085, 0.9058824,
		0.909804, 0.91372555, 0.9176471, 0.9215687, 0.92549026, 0.9294118, 0.9333334, 0.93725497,
		0.94117653, 0.9450981, 0.9490197, 0.95294124, 0.9568628, 0.9607844, 0.96470594, 0.9686275,
		0.9725491, 0.97647065, 0.9803922, 0.9843138, 0.98823535, 0.9921569, 0.9960785, 1,
	};

	constexpr Float32 Power22ToLinearLookupTable[256] =
	{
		0, 5.0770514E-06, 2.3328002E-05, 5.6921766E-05, 0.000107187356, 0.00017512396, 0.00026154376, 0.00036713626,
		0.00049250375, 0.0006381828, 0.00080465846, 0.0009923743, 0.0012017397, 0.0014331347, 0.0016869154, 0.0019634163,
		0.0022629532, 0.0025858255, 0.0029323183, 0.003302703, 0.0036972393, 0.004116177, 0.004559755, 0.005028203,
		0.0055217454, 0.006040594, 0.0065849577, 0.0071550375, 0.007751028, 0.008373118, 0.009021493, 0.009696329,
		0.010397803, 0.011126082, 0.011881335, 0.01266372, 0.013473397, 0.014310519, 0.015175238, 0.0160677,
		0.016988052, 0.017936433, 0.018912982, 0.019917838, 0.020951131, 0.022012994, 0.023103556, 0.024222942,
		0.02537128, 0.026548686, 0.027755283, 0.02899119, 0.030256523, 0.031551395, 0.03287592, 0.03423021,
		0.03561437, 0.037028518, 0.03847275, 0.039947174, 0.041451894, 0.042987015, 0.04455263, 0.046148844,
		0.047775757, 0.049433462, 0.051122054, 0.05284163, 0.05459228, 0.0563741, 0.05818718, 0.06003161,
		0.061907478, 0.06381487, 0.065753885, 0.06772459, 0.069727086, 0.07176145, 0.073827766, 0.075926125,
		0.07805659, 0.08021926, 0.08241421, 0.08464151, 0.086901255, 0.08919351, 0.09151836, 0.09387587,
		0.09626612, 0.0986892, 0.10114516, 0.1036341, 0.106156066, 0.10871115, 0.11129942, 0.113920934,
		0.11657579, 0.11926404, 0.12198573, 0.124740966, 0.1275298, 0.1303523, 0.13320853, 0.13609856,
		0.13902247, 0.1419803, 0.14497215, 0.14799805, 0.15105806, 0.15415229, 0.15728074, 0.16044353,
		0.1636407, 0.1668723, 0.17013839, 0.17343906, 0.17677434, 0.18014431, 0.18354902, 0.18698853,
		0.1904629, 0.19397219, 0.19751646, 0.20109574, 0.20471014, 0.20835967, 0.21204442, 0.21576442,
		0.21951973, 0.22331043, 0.22713655, 0.23099814, 0.23489527, 0.238828, 0.24279638, 0.24680044,
		0.25084025, 0.25491586, 0.25902736, 0.26317474, 0.2673581, 0.27157745, 0.27583286, 0.2801244,
		0.28445208, 0.288816, 0.29321617, 0.29765266, 0.3021255, 0.30663478, 0.31118053, 0.31576276,
		0.32038158, 0.32503697, 0.32972905, 0.3344578, 0.33922336, 0.34402567, 0.34886485, 0.35374093,
		0.35865393, 0.36360392, 0.36859095, 0.37361506, 0.37867627, 0.38377467, 0.38891026, 0.39408314,
		0.39929333, 0.40454084, 0.40982577, 0.4151481, 0.42050794, 0.42590532, 0.43134022, 0.43681276,
		0.44232297, 0.44787085, 0.4534565, 0.45907992, 0.46474114, 0.47044027, 0.47617728, 0.48195225,
		0.48776522, 0.49361622, 0.49950528, 0.5054325, 0.51139784, 0.5174014, 0.52344316, 0.52952325,
		0.53564173, 0.5417985, 0.5479936, 0.5542272, 0.56049925, 0.56680983, 0.573159, 0.57954675,
		0.5859731, 0.59243816, 0.5989419, 0.6054844, 0.61206573, 0.61868584, 0.6253448, 0.6320427,
		0.6387796, 0.6455554, 0.6523702, 0.6592241, 0.6661171, 0.6730492, 0.68002045, 0.6870309,
		0.69408065, 0.7011696, 0.7082979, 0.71546555, 0.7226726, 0.729919, 0.7372049, 0.7445303,
		0.7518952, 0.7592997, 0.7667437, 0.77422744, 0.7817508, 0.78931385, 0.79691666, 0.80455923,
		0.8122416, 0.8199638, 0.82772595, 0.8355279, 0.84336984, 0.8512518, 0.8591737, 0.86713564,
		0.8751377, 0.88317984, 0.8912622, 0.8993846, 0.90754735, 0.91575027, 0.92399347, 0.93227696,
		0.9406008, 0.9489651, 0.9573697, 0.96581477, 0.9743003, 0.9828264, 0.99139297, 1,
	};

	constexpr Float32 sRGBToLinearLookupTable[256] =
	{
		0, 0.000303527, 0.000607054, 0.00091058103, 0.001214108, 0.001517635, 0.0018211621, 0.002124689,
		0.002428216, 0.002731743, 0.00303527, 0.0033465356, 0.003676507, 0.004024717, 0.004391442, 0.0047769533,
		0.005181517, 0.0056053917, 0.0060488326, 0.006512091, 0.00699541, 0.0074990317, 0.008023192, 0.008568125,
		0.009134057, 0.009721218, 0.010329823, 0.010960094, 0.011612245, 0.012286487, 0.012983031, 0.013702081,
		0.014443844, 0.015208514, 0.015996292, 0.016807375, 0.017641952, 0.018500218, 0.019382361, 0.020288562,
		0.02121901, 0.022173883, 0.023153365, 0.02415763, 0.025186857, 0.026241222, 0.027320892, 0.028426038,
		0.029556843, 0.03071345, 0.03189604, 0.033104774, 0.03433981, 0.035601325, 0.036889452, 0.038204376,
		0.039546248, 0.04091521, 0.042311423, 0.043735042, 0.045186214, 0.046665095, 0.048171833, 0.049706575,
		0.051269468, 0.052860655, 0.05448028, 0.056128494, 0.057805434, 0.05951124, 0.06124607, 0.06301003,
		0.06480328, 0.06662595, 0.06847818, 0.07036011, 0.07227186, 0.07421358, 0.07618539, 0.07818743,
		0.08021983, 0.082282715, 0.084376216, 0.086500466, 0.088655606, 0.09084173, 0.09305898, 0.095307484,
		0.09758736, 0.09989874, 0.10224175, 0.10461649, 0.10702311, 0.10946172, 0.111932434, 0.11443538,
		0.116970696, 0.11953845, 0.12213881, 0.12477186, 0.12743773, 0.13013652, 0.13286836, 0.13563336,
		0.13843165, 0.14126332, 0.1441285, 0.1470273, 0.14995982, 0.15292618, 0.1559265, 0.15896086,
		0.16202943, 0.16513224, 0.16826946, 0.17144115, 0.17464745, 0.17788847, 0.1811643, 0.18447503,
		0.1878208, 0.19120172, 0.19461787, 0.19806935, 0.2015563, 0.20507877, 0.2086369, 0.21223079,
		0.21586053, 0.21952623, 0.22322798, 0.22696589, 0.23074007, 0.23455065, 0.23839766, 0.2422812,
		0.2462014, 0.25015837, 0.25415218, 0.2581829, 0.26225072, 0.26635566, 0.27049786, 0.27467737,
		0.27889434, 0.2831488, 0.2874409, 0.2917707, 0.29613832, 0.30054384, 0.30498737, 0.30946895,
		0.31398875, 0.31854683, 0.32314324, 0.32777813, 0.33245158, 0.33716366, 0.34191445, 0.3467041,
		0.3515327, 0.35640025, 0.36130688, 0.3662527, 0.37123778, 0.37626222, 0.3813261, 0.38642952,
		0.39157256, 0.3967553, 0.40197787, 0.4072403, 0.4125427, 0.41788515, 0.42326775, 0.42869055,
		0.4341537, 0.43965724, 0.44520125, 0.45078585, 0.45641106, 0.46207705, 0.46778384, 0.47353154,
		0.47932023, 0.48514998, 0.4910209, 0.49693304, 0.5028866, 0.50888145, 0.5149178, 0.5209957,
		0.52711535, 0.5332766, 0.5394797, 0.5457247, 0.5520116, 0.5583406, 0.5647117, 0.57112503,
		0.57758063, 0.5840786, 0.590619, 0.597202, 0.60382754, 0.61049575, 0.61720675, 0.62396055,
		0.63075733, 0.637597, 0.6444799, 0.6514058, 0.65837497, 0.66538745, 0.67244333, 0.6795426,
		0.68668544, 0.69387203, 0.70110214, 0.70837605, 0.7156938, 0.72305536, 0.730461, 0.7379107,
		0.7454045, 0.75294244, 0.76052475, 0.7681514, 0.77582246, 0.78353804, 0.79129815, 0.79910296,
		0.8069525, 0.8148468, 0.822786, 0.8307701, 0.83879924, 0.84687346, 0.8549928, 0.8631574,
		0.87136734, 0.8796226, 0.8879232, 0.89626956, 0.90466136, 0.913099, 0.92158204, 0.93011117,
		0.9386859, 0.9473069, 0.9559735, 0.9646866, 0.9734455, 0.98225087, 0.9911022, 1,
	};


	LinearColor::LinearColor()
	{

	}

	LinearColor::LinearColor(Color color, GammaSpace gammaSpace)
	{
		a = Divide255LinearLookupTable[ color.a ];
		switch (gammaSpace)
		{
		case GammaSpace::Linear:
			r = Divide255LinearLookupTable[ color.r ];
			g = Divide255LinearLookupTable[ color.g ];
			b = Divide255LinearLookupTable[ color.b ];
			break;
		case GammaSpace::Power22:
			r = Power22ToLinearLookupTable[ color.r ];
			g = Power22ToLinearLookupTable[ color.g ];
			b = Power22ToLinearLookupTable[ color.b ];
			break;
		case GammaSpace::sRGB:
			r = sRGBToLinearLookupTable[ color.r ];
			g = sRGBToLinearLookupTable[ color.g ];
			b = sRGBToLinearLookupTable[ color.b ];
			break;
		}
	}

	LinearColor::LinearColor(RealType r, RealType g, RealType b, RealType a)
		: r(r), g(g), b(b), a(a)
	{

	}

	LinearColor::LinearColor(const LinearColor& other)
	{
		MemoryCopy( this, &other );
	}

	LinearColor& LinearColor::operator=(const LinearColor& other)
	{
		MemoryCopy( this, &other );

		return *this;
	}

	Void LinearColor::Clamp01()
	{
		r = Engine::Clamp01(r);
		g = Engine::Clamp01(g);
		b = Engine::Clamp01(b);
		a = Engine::Clamp01(a);
	}

	RealType LinearColor::Luminance() const
	{
		return
			r * 0.2126 +
			g * 0.7152 +
			b * 0.0722;
	}

	Color LinearColor::ToColor(GammaSpace gammaSpace) const
	{
		Byte x, y, z, w = a * 255;
		switch (gammaSpace)
		{
		case GammaSpace::Linear:
			x = r * 255;
			y = g * 255;
			z = b * 255;
			break;
		case GammaSpace::Power22:
		{
			constexpr RealType Exponent = 1 / 2.2;


			x = Power(r, Exponent) * 255;
			y = Power(g, Exponent) * 255;
			z = Power(b, Exponent) * 255;
		}
			break;
		case GammaSpace::sRGB:
		{
			constexpr RealType Exponent = 1 / 2.4;


			x = ( r > 0.0031308 ? Power(r, Exponent) * 1.055 - 0.055 : r * 12.92 ) * 255;
			y = ( g > 0.0031308 ? Power(g, Exponent) * 1.055 - 0.055 : g * 12.92 ) * 255;
			z = ( b > 0.0031308 ? Power(b, Exponent) * 1.055 - 0.055 : b * 12.92 ) * 255;
		}
			break;
		}

		return { x, y, z, w };
	}

	RealType& LinearColor::operator[](SizeType index)
	{
		return components[index];
	}

	const RealType& LinearColor::operator[](SizeType index) const
	{
		return const_cast<LinearColor*>(this)->operator[](index);
	}

	LinearColor LinearColor::operator+(const LinearColor& other) const
	{
		LinearColor result;
		for (SizeType index = 0; index < 4; ++index)
			result[index] = components[index] + other[index];

		return result;
	}

	LinearColor LinearColor::operator-(const LinearColor& other) const
	{
		LinearColor result;
		for (SizeType index = 0; index < 4; ++index)
			result[index] = components[index] - other[index];

		return result;
	}

	LinearColor LinearColor::operator*(const LinearColor& other) const
	{
		LinearColor result;
		for (SizeType index = 0; index < 4; ++index)
			result[index] = components[index] * other[index];

		return result;
	}

	LinearColor LinearColor::operator*(RealType scalar) const
	{
		LinearColor result;
		for (SizeType index = 0; index < 4; ++index)
			result[index] = components[index] * scalar;

		return result;
	}

	LinearColor LinearColor::operator/(RealType scalar) const
	{
		LinearColor result;
		for (SizeType index = 0; index < 4; ++index)
			result[index] = components[index] / scalar;

		return result;
	}

	LinearColor& LinearColor::operator+=(const LinearColor& other)
	{
		return *this = *this + other;
	}

	LinearColor& LinearColor::operator-=(const LinearColor& other)
	{
		return *this = *this - other;
	}

	LinearColor& LinearColor::operator*=(const LinearColor& other)
	{
		return *this = *this * other;
	}

	LinearColor& LinearColor::operator*=(RealType scalar)
	{
		return *this = *this * scalar;
	}

	LinearColor& LinearColor::operator/=(RealType scalar)
	{
		return *this = *this / scalar;
	}

#pragma endregion
}