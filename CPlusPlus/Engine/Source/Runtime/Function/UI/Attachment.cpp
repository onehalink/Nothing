#include "Attachment.h"

#include "Element.h"
#include "_Helper.h"



namespace Engine::UI::Attachment
{
#pragma region Embedded font

	constexpr SizeType GlyphCount = 95;
	constexpr SizeType GlyphWidth = 8;
	constexpr SizeType GlyphHeight = 16;
	constexpr SizeType GlyphCodePointOffset = 32;

	constexpr Byte GlyphShapes[GlyphCount][GlyphHeight] =
	{
		/**
		*	Lookup table(range is between 32 and 126)
		*
		*
		*	Coordinate System
		*	Y axis
		*	^ (0, height - 1)
		*	|
		*	|
		*	|
		*	|
		*	+------------> X axis
		*	(0, 0)		  (width - 1, 0)
		*
		*
		*	Note:
		*		The count of glyph is 95
		*		The width of glyph is 8
		*		The height of glyph is 16
		*
		*	Extra:
		*		Use a byte to represent a row
		*		Use 16 bytes to represent a glyph
		*/
		{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, }, /*" ",0*/

		{ 0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x3C,0x3C,0x3C,0x18,0x00,0x00,0x00, }, /*"!",1*/

		{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x00,0x00,0x00, }, /*""",2*/

		{ 0x00,0x00,0x00,0x00,0x6C,0x6C,0xFE,0x6C,0x6C,0x6C,0xFE,0x6C,0x6C,0x00,0x00,0x00, }, /*"#",3*/

		{ 0x00,0x00,0x18,0x18,0x3C,0x66,0x60,0x30,0x18,0x0C,0x06,0x66,0x3C,0x18,0x18,0x00, }, /*"$",4*/

		{ 0x00,0x00,0x00,0x70,0xD8,0xDA,0x76,0x0C,0x18,0x30,0x6E,0x5B,0x1B,0x0E,0x00,0x00, }, /*"%",5*/

		{ 0x00,0x00,0x00,0x00,0xDC,0x66,0x66,0xF6,0x06,0x1C,0x36,0x36,0x1C,0x00,0x00,0x00, }, /*"&",6*/

		{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x00,0x00,0x00, }, /*"'",7*/

		{ 0x00,0x00,0x30,0x18,0x18,0x0C,0x0C,0x0C,0x0C,0x0C,0x18,0x18,0x30,0x00,0x00,0x00, }, /*"(",8*/

		{ 0x00,0x00,0x0C,0x18,0x18,0x30,0x30,0x30,0x30,0x30,0x18,0x18,0x0C,0x00,0x00,0x00, }, /*")",9*/

		{ 0x00,0x00,0x00,0x00,0x00,0x00,0x6C,0x38,0xFE,0x38,0x6C,0x00,0x00,0x00,0x00,0x00, }, /*"*",10*/

		{ 0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00,0x00,0x00,0x00, }, /*"+",11*/

		{ 0x00,0x00,0x18,0x30,0x38,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, }, /*",",12*/

		{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00, }, /*"-",13*/

		{ 0x00,0x00,0x00,0x00,0x38,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, }, /*".",14*/

		{ 0x00,0x00,0x00,0x06,0x06,0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0x00,0x00,0x00, }, /*"/",15*/

		{ 0x00,0x00,0x00,0x00,0x78,0xCC,0xDC,0xDC,0xCC,0xEC,0xEC,0xCC,0x78,0x00,0x00,0x00, }, /*"0",16*/

		{ 0x00,0x00,0x00,0x00,0x30,0x30,0x30,0x30,0x30,0x30,0x3E,0x38,0x30,0x00,0x00,0x00, }, /*"1",17*/

		{ 0x00,0x00,0x00,0x00,0x7E,0x06,0x0C,0x18,0x30,0x60,0x66,0x66,0x3C,0x00,0x00,0x00, }, /*"2",18*/

		{ 0x00,0x00,0x00,0x00,0x3C,0x66,0x66,0x60,0x38,0x60,0x66,0x66,0x3C,0x00,0x00,0x00, }, /*"3",19*/

		{ 0x00,0x00,0x00,0x00,0x60,0x60,0xFE,0x66,0x6C,0x6C,0x6C,0x0C,0x0C,0x00,0x00,0x00, }, /*"4",20*/

		{ 0x00,0x00,0x00,0x00,0x1E,0x30,0x60,0x60,0x3E,0x06,0x06,0x06,0x7E,0x00,0x00,0x00, }, /*"5",21*/

		{ 0x00,0x00,0x00,0x00,0x3C,0x66,0x66,0x66,0x66,0x3E,0x0C,0x18,0x38,0x00,0x00,0x00, }, /*"6",22*/

		{ 0x00,0x00,0x00,0x00,0x0C,0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x7E,0x00,0x00,0x00, }, /*"7",23*/

		{ 0x00,0x00,0x00,0x00,0x3C,0x66,0x66,0x76,0x3C,0x6E,0x66,0x66,0x3C,0x00,0x00,0x00, }, /*"8",24*/

		{ 0x00,0x00,0x00,0x00,0x1C,0x18,0x30,0x7C,0x66,0x66,0x66,0x66,0x3C,0x00,0x00,0x00, }, /*"9",25*/

		{ 0x00,0x00,0x00,0x00,0x38,0x38,0x00,0x00,0x00,0x38,0x38,0x00,0x00,0x00,0x00,0x00, }, /*":",26*/

		{ 0x00,0x00,0x18,0x30,0x38,0x38,0x00,0x00,0x00,0x38,0x38,0x00,0x00,0x00,0x00,0x00, }, /*";",27*/

		{ 0x00,0x00,0x00,0x00,0x60,0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x60,0x00,0x00,0x00, }, /*"<",28*/

		{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00, }, /*"=",29*/

		{ 0x00,0x00,0x00,0x00,0x06,0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x06,0x00,0x00,0x00, }, /*">",30*/

		{ 0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x30,0x66,0x66,0x3C,0x00,0x00,0x00, }, /*"?",31*/

		{ 0x00,0x00,0x00,0x00,0xFE,0x03,0xF3,0xDB,0xDB,0xF3,0xC3,0xC3,0x7E,0x00,0x00,0x00, }, /*"@",32*/

		{ 0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x7E,0x66,0x66,0x66,0x3C,0x18,0x00,0x00,0x00, }, /*"A",33*/

		{ 0x00,0x00,0x00,0x00,0x3E,0x66,0x66,0x66,0x3E,0x66,0x66,0x66,0x3E,0x00,0x00,0x00, }, /*"B",34*/

		{ 0x00,0x00,0x00,0x00,0x3C,0x66,0x66,0x06,0x06,0x06,0x66,0x66,0x3C,0x00,0x00,0x00, }, /*"C",35*/

		{ 0x00,0x00,0x00,0x00,0x1E,0x36,0x66,0x66,0x66,0x66,0x66,0x36,0x1E,0x00,0x00,0x00, }, /*"D",36*/

		{ 0x00,0x00,0x00,0x00,0x7E,0x06,0x06,0x06,0x3E,0x06,0x06,0x06,0x7E,0x00,0x00,0x00, }, /*"E",37*/

		{ 0x00,0x00,0x00,0x00,0x06,0x06,0x06,0x06,0x3E,0x06,0x06,0x06,0x7E,0x00,0x00,0x00, }, /*"F",38*/

		{ 0x00,0x00,0x00,0x00,0x7C,0x66,0x66,0x76,0x06,0x06,0x66,0x66,0x3C,0x00,0x00,0x00, }, /*"G",39*/

		{ 0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x7E,0x66,0x66,0x66,0x66,0x00,0x00,0x00, }, /*"H",40*/

		{ 0x00,0x00,0x00,0x00,0x3C,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00, }, /*"I",41*/

		{ 0x00,0x00,0x00,0x00,0x3C,0x66,0x66,0x60,0x60,0x60,0x60,0x60,0x60,0x00,0x00,0x00, }, /*"J",42*/

		{ 0x00,0x00,0x00,0x00,0x66,0x66,0x36,0x36,0x1E,0x36,0x36,0x66,0x66,0x00,0x00,0x00, }, /*"K",43*/

		{ 0x00,0x00,0x00,0x00,0x7E,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x00,0x00,0x00, }, /*"L",44*/

		{ 0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6,0xD6,0xD6,0xD6,0xEE,0xC6,0xC6,0x00,0x00,0x00, }, /*"M",45*/

		{ 0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6,0xE6,0xF6,0xDE,0xCE,0xC6,0xC6,0x00,0x00,0x00, }, /*"N",46*/

		{ 0x00,0x00,0x00,0x00,0x3C,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x3C,0x00,0x00,0x00, }, /*"O",47*/

		{ 0x00,0x00,0x00,0x00,0x06,0x06,0x06,0x06,0x3E,0x66,0x66,0x66,0x3E,0x00,0x00,0x00, }, /*"P",48*/

		{ 0x00,0x00,0x60,0x30,0x3C,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x3C,0x00,0x00,0x00, }, /*"Q",49*/

		{ 0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x36,0x3E,0x66,0x66,0x66,0x3E,0x00,0x00,0x00, }, /*"R",50*/

		{ 0x00,0x00,0x00,0x00,0x3C,0x66,0x60,0x30,0x18,0x0C,0x06,0x66,0x3C,0x00,0x00,0x00, }, /*"S",51*/

		{ 0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x00,0x00,0x00, }, /*"T",52*/

		{ 0x00,0x00,0x00,0x00,0x3C,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00, }, /*"U",53*/

		{ 0x00,0x00,0x00,0x00,0x18,0x3C,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00, }, /*"V",54*/

		{ 0x00,0x00,0x00,0x00,0x6C,0x6C,0x6C,0xD6,0xD6,0xD6,0xC6,0xC6,0xC6,0x00,0x00,0x00, }, /*"W",55*/

		{ 0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x34,0x18,0x18,0x2C,0x66,0x66,0x00,0x00,0x00, }, /*"X",56*/

		{ 0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x3C,0x66,0x66,0x66,0x66,0x00,0x00,0x00, }, /*"Y",57*/

		{ 0x00,0x00,0x00,0x00,0x7E,0x06,0x06,0x0C,0x18,0x30,0x60,0x60,0x7E,0x00,0x00,0x00, }, /*"Z",58*/

		{ 0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x00,0x00,0x00, }, /*"[",59*/

		{ 0x00,0x00,0x00,0x60,0x60,0x30,0x30,0x18,0x18,0x0C,0x0C,0x06,0x06,0x00,0x00,0x00, }, /*"\",60*/

		{ 0x00,0x3C,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3C,0x00,0x00,0x00, }, /*"]",61*/

		{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x66,0x3C,0x18,0x00, }, /*"^",62*/

		{ 0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, }, /*"_",63*/

		{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x00,0x00,0x00, }, /*"'",64*/

		{ 0x00,0x00,0x00,0x00,0x7C,0x66,0x66,0x7C,0x60,0x60,0x3C,0x00,0x00,0x00,0x00,0x00, }, /*"a",65*/

		{ 0x00,0x00,0x00,0x00,0x3E,0x66,0x66,0x66,0x66,0x66,0x3E,0x06,0x06,0x00,0x00,0x00, }, /*"b",66*/

		{ 0x00,0x00,0x00,0x00,0x3C,0x66,0x06,0x06,0x06,0x66,0x3C,0x00,0x00,0x00,0x00,0x00, }, /*"c",67*/

		{ 0x00,0x00,0x00,0x00,0x7C,0x66,0x66,0x66,0x66,0x66,0x7C,0x60,0x60,0x00,0x00,0x00, }, /*"d",68*/

		{ 0x00,0x00,0x00,0x00,0x3C,0x06,0x06,0x7E,0x66,0x66,0x3C,0x00,0x00,0x00,0x00,0x00, }, /*"e",69*/

		{ 0x00,0x00,0x00,0x00,0x0C,0x0C,0x0C,0x0C,0x7E,0x0C,0x0C,0x0C,0x78,0x00,0x00,0x00, }, /*"f",70*/

		{ 0x00,0x3E,0x60,0x60,0x7C,0x66,0x66,0x66,0x66,0x66,0x7C,0x00,0x00,0x00,0x00,0x00, }, /*"g",71*/

		{ 0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x66,0x3E,0x06,0x06,0x00,0x00,0x00, }, /*"h",72*/

		{ 0x00,0x00,0x00,0x00,0x7E,0x18,0x18,0x18,0x18,0x18,0x1E,0x00,0x18,0x18,0x00,0x00, }, /*"i",73*/

		{ 0x00,0x1E,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3C,0x00,0x30,0x30,0x00,0x00, }, /*"j",74*/

		{ 0x00,0x00,0x00,0x00,0x66,0x66,0x36,0x1E,0x36,0x66,0x66,0x06,0x06,0x00,0x00,0x00, }, /*"k",75*/

		{ 0x00,0x00,0x00,0x00,0x7E,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1E,0x00,0x00,0x00, }, /*"l",76*/

		{ 0x00,0x00,0x00,0x00,0xC6,0xD6,0xD6,0xD6,0xD6,0xD6,0x7E,0x00,0x00,0x00,0x00,0x00, }, /*"m",77*/

		{ 0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x66,0x3E,0x00,0x00,0x00,0x00,0x00, }, /*"n",78*/

		{ 0x00,0x00,0x00,0x00,0x3C,0x66,0x66,0x66,0x66,0x66,0x3C,0x00,0x00,0x00,0x00,0x00, }, /*"o",79*/

		{ 0x00,0x06,0x06,0x06,0x3E,0x66,0x66,0x66,0x66,0x66,0x3E,0x00,0x00,0x00,0x00,0x00, }, /*"p",80*/

		{ 0x00,0x60,0x60,0x60,0x7C,0x66,0x66,0x66,0x66,0x66,0x7C,0x00,0x00,0x00,0x00,0x00, }, /*"q",81*/

		{ 0x00,0x00,0x00,0x00,0x06,0x06,0x06,0x06,0x0E,0x76,0x66,0x00,0x00,0x00,0x00,0x00, }, /*"r",82*/

		{ 0x00,0x00,0x00,0x00,0x3E,0x60,0x60,0x3C,0x06,0x06,0x7C,0x00,0x00,0x00,0x00,0x00, }, /*"s",83*/

		{ 0x00,0x00,0x00,0x00,0x78,0x0C,0x0C,0x0C,0x0C,0x0C,0x7E,0x0C,0x0C,0x00,0x00,0x00, }, /*"t",84*/

		{ 0x00,0x00,0x00,0x00,0x7C,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,0x00, }, /*"u",85*/

		{ 0x00,0x00,0x00,0x00,0x18,0x3C,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,0x00, }, /*"v",86*/

		{ 0x00,0x00,0x00,0x00,0x6C,0x6C,0xD6,0xD6,0xD6,0xD6,0xC6,0x00,0x00,0x00,0x00,0x00, }, /*"w",87*/

		{ 0x00,0x00,0x00,0x00,0x66,0x66,0x3C,0x18,0x3C,0x66,0x66,0x00,0x00,0x00,0x00,0x00, }, /*"x",88*/

		{ 0x00,0x0F,0x18,0x30,0x3C,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,0x00, }, /*"y",89*/

		{ 0x00,0x00,0x00,0x00,0x7E,0x06,0x0C,0x18,0x30,0x60,0x7E,0x00,0x00,0x00,0x00,0x00, }, /*"z",90*/

		{ 0x00,0x00,0x30,0x18,0x18,0x18,0x0C,0x06,0x0C,0x18,0x18,0x18,0x30,0x00,0x00,0x00, }, /*"{",91*/

		{ 0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00, }, /*"|",92*/

		{ 0x00,0x00,0x0C,0x18,0x18,0x18,0x30,0x60,0x30,0x18,0x18,0x18,0x0C,0x00,0x00,0x00, }, /*"}",93*/

		{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x71,0xDB,0x8E,0x00,0x00,0x00, }, /*"~",94*/
	};

#pragma endregion


	Void Text::Render(IRenderable* interface, Vector2Int position, Vector2Int size)
	{
		Render(interface, position, size, CalculateTextRenderSize(text));
	}

	Void Text::Render(IRenderable* interface, Vector2Int position, Vector2Int size, Vector2Int textRenderSize)
	{
		auto penPosition = position + padding.leftBottom +
			Private::CalculateRectangleAlignment(alignment, size, textRenderSize, padding.rightTop);

		for (SizeType iteration = 0, end = text.GetCount(); iteration < end; iteration++)
		{
			auto unicode = text[iteration];

			if (unicode < ' ')
				continue;

			SizeType index = unicode - GlyphCodePointOffset;
			auto shape = GlyphShapes[index];

			if (auto limit = interface->GetScissorRectangle().Overlap({ penPosition, penPosition + Vector2Int(GlyphWidth, GlyphHeight) }))
				for (Int32 y = limit.minimum.y; y < limit.maximum.y; y++)
					for (Int32 x = limit.minimum.x; x < limit.maximum.x; x++)
					{
						Int32 u = x - penPosition.x;
						Int32 v = y - penPosition.y;

						if ((shape[v] >> u) & 0x01)
							interface->SetPixel(x, y, color);
					}

			penPosition.x += GlyphWidth;
		}
	}

	Vector2Int Text::CalculateTextRenderSize(U32StringView view)
	{
		return
		{
			GlyphWidth * view.GetCount(),
			GlyphHeight
		};
	}

	Void Shape::Render(IRenderable* interface, Vector2Int position, Color color, RealType sharpness)
	{
		auto Blend = [](Color background, Color foreground, RealType alpha)
			{
				Color result;
				for (SizeType index = 0; index < 3; ++index)
					result[index] = Lerp(background[index], foreground[index], alpha);

				return result;
			};


		if (auto limit = interface->GetScissorRectangle().Overlap({ position, position + Vector2Int(texture->width, texture->height) }))
		{
			for (Int32 y = limit.minimum.y; y < limit.maximum.y; ++y)
				for (Int32 x = limit.minimum.x; x < limit.maximum.x; ++x)
				{
					Int32 u = x - position.x;
					Int32 v = y - position.y;

					Byte value = texture->GetPixel(u, v);
					RealType distance = value / 255.0 * 2 - 1;
					RealType alpha = Clamp01(distance * sharpness + 0.5);

					interface->SetPixel(x, y,
						Blend(
							interface->GetPixel(x, y),
							color,
							alpha
						)
					);
				}
		}
	}

	Void Button::Update(const InputSystem& inputSystem)
	{
		isHover = hitBox.Contain(inputSystem.mousePosition);
		if (!isHover)
			return;

		if (inputSystem.MouseButtonClicked(MouseButton::Left) && OnClick)
			OnClick();
	}

	Void Draggable::Update(const InputSystem& inputSystem, Element* attachTo, const RectangleInt& hitBox)
	{
		Bool isHover = hitBox.Contain(inputSystem.mousePosition);
		Bool isPress = inputSystem.MouseButtonPressed(MouseButton::Left);

		if (!isHeld && isHover && isPress)
		{
			isHeld = true;

			lastPosition = attachTo->relativePosition;
			beginDragPosition = inputSystem.mousePosition;
		}

		if (isPress && isHeld)
			attachTo->relativePosition = lastPosition + inputSystem.mousePosition - beginDragPosition;
		else
			isHeld = false;

		//if (isHeld)
			attachTo->relativePosition = Clamp(attachTo->relativePosition, moveLimit.minimum, moveLimit.maximum);
	}

	Void Sizing::Update(const InputSystem& inputSystem, Element* attachTo)
	{
		Bool isPressed = inputSystem.MouseButtonPressed(MouseButton::Left);
		if (!isHeld && edge != Edge::Unknown && isPressed)
		{
			isHeld = true;

			beginDragPosition = inputSystem.mousePosition;
			lastPosition = attachTo->relativePosition;
			lastSize = attachTo->size;
		}

		if (!isPressed)
			isHeld = false;

		if (isHeld)
		{
			auto offset = inputSystem.mousePosition - beginDragPosition;
			// dont allow to move attached element
			attachTo->relativePosition = lastPosition;
			switch (edge)
			{
			case Edge::Left:
				attachTo->relativePosition.x = lastPosition.x + Minimum(offset.x, lastSize.x - minimumSize.x);
				attachTo->size.x = lastSize.x - offset.x;
				break;
			case Edge::Right:
				attachTo->size.x = lastSize.x + offset.x;
				break;
			case Edge::Bottom:
				attachTo->relativePosition.y = lastPosition.y + Minimum(offset.y, lastSize.y - minimumSize.y);
				attachTo->size.y = lastSize.y - offset.y;
				break;
			case Edge::Top:
				attachTo->size.y = lastSize.y + offset.y;
				break;
			case Edge::LeftBottom:
				attachTo->relativePosition = lastPosition + Minimum(offset, lastSize - minimumSize);
				attachTo->size = lastSize + Vector2Int(-offset.x, -offset.y);
				break;
			case Edge::LeftTop:
				attachTo->relativePosition.x = lastPosition.x + Minimum(offset.x, lastSize.x - minimumSize.x);
				attachTo->size = lastSize + Vector2Int(-offset.x, offset.y);
				break;
			case Edge::RightBottom:
				attachTo->relativePosition.y = lastPosition.y + Minimum(offset.y, lastSize.y - minimumSize.y);
				attachTo->size = lastSize + Vector2Int(offset.x, -offset.y);
				break;
			case Edge::RightTop:
				attachTo->size = lastSize + offset;
				break;
			}

			attachTo->size = Maximum(attachTo->size, minimumSize);
		}

		auto position = attachTo->GetAbsolutePosition();
		auto size = attachTo->size;
		auto minimum = position;
		auto maximum = minimum + size;

		edgeLeftHitBox = { minimum, minimum + Vector2Int(testWidth, size.y) };
		edgeRightHitBox = { maximum - Vector2Int(testWidth, size.y), maximum };
		edgeBottomHitBox = { minimum, minimum + Vector2Int(size.x, testWidth) };
		edgeTopHitBox = { maximum - Vector2Int(size.x, testWidth), maximum };

		if (!isHeld)
		{
			Bool testEdgeLeft = edgeLeftHitBox.Contain(inputSystem.mousePosition);
			Bool testEdgeBottom = edgeBottomHitBox.Contain(inputSystem.mousePosition);
			Bool testEdgeRight = edgeRightHitBox.Contain(inputSystem.mousePosition);
			Bool testEdgeTop = edgeTopHitBox.Contain(inputSystem.mousePosition);

			if (testEdgeLeft && testEdgeBottom)
			{
				edge = Edge::LeftBottom;
			}
			else if (testEdgeLeft && testEdgeTop)
			{
				edge = Edge::LeftTop;
			}
			else if (testEdgeRight && testEdgeBottom)
			{
				edge = Edge::RightBottom;
			}
			else if (testEdgeRight && testEdgeTop)
			{
				edge = Edge::RightTop;
			}
			else if (testEdgeLeft)
			{
				edge = Edge::Left;
			}
			else if (testEdgeBottom)
			{
				edge = Edge::Bottom;
			}
			else if (testEdgeRight)
			{
				edge = Edge::Right;
			}
			else if (testEdgeTop)
			{
				edge = Edge::Top;
			}
			else
				edge = Edge::Unknown;
		}
	}

	Void Sizing::Render(IRenderable* interface)
	{
		switch (edge)
		{
		case Edge::Left:
			Render::SolidRectangle(interface, edgeLeftHitBox, edgeColor);
			break;
		case Edge::Right:
			Render::SolidRectangle(interface, edgeRightHitBox, edgeColor);
			break;
		case Edge::Bottom:
			Render::SolidRectangle(interface, edgeBottomHitBox, edgeColor);
			break;
		case Edge::Top:
			Render::SolidRectangle(interface, edgeTopHitBox, edgeColor);
			break;
		case Edge::LeftBottom:
			Render::SolidRectangle(interface, edgeLeftHitBox, edgeColor);
			Render::SolidRectangle(interface, edgeBottomHitBox, edgeColor);
			break;
		case Edge::LeftTop:
			Render::SolidRectangle(interface, edgeLeftHitBox, edgeColor);
			Render::SolidRectangle(interface, edgeTopHitBox, edgeColor);
			break;
		case Edge::RightBottom:
			Render::SolidRectangle(interface, edgeRightHitBox, edgeColor);
			Render::SolidRectangle(interface, edgeBottomHitBox, edgeColor);
			break;
		case Edge::RightTop:
			Render::SolidRectangle(interface, edgeRightHitBox, edgeColor);
			Render::SolidRectangle(interface, edgeTopHitBox, edgeColor);
			break;
		}
	}
}